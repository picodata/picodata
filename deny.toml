# Note that all fields that take a lint level have these possible values:
# * deny - An error will be produced and the check will fail
# * warn - A warning will be produced, but the check will not fail
# * allow - No warning or error will be produced, but a note might be

########
# ROOT #
########

# The graph table configures how the dependency graph is constructed and thus
# which crates the checks are performed against
[graph]
# If 1 or more target triples (and optionally, target_features) are specified,
# only the specified targets will be checked when running `cargo deny check`.
# This means, if a particular package is only ever used as a target specific
# dependency, such as, for example, the `nix` crate only being used via the
# `target_family = "unix"` configuration, that only having windows targets in
# this list would mean the nix crate, as well as any of its exclusive
# dependencies not shared by any other crates, would be ignored, as the target
# list here is effectively saying which targets you are building for.
targets = [
    "x86_64-unknown-linux-gnu", "x86_64-apple-darwin", 
    "aarch64-unknown-linux-gnu", "aarch64-apple-darwin", 
]
# If true, metadata will be collected with `--all-features`. Note that this can't
# be toggled off if true, if you want to conditionally enable `--all-features` it
# is recommended to pass `--all-features` on the cmd line instead
all-features = true
# If true, metadata will be collected with `--no-default-features`. The same
# caveat with `all-features` applies
no-default-features = false

# The output table provides options for how/if diagnostics are outputted
[output]
# When outputting inclusion graphs in diagnostics that include features, this
# option can be used to specify the depth at which feature edges will be added.
# This option is included since the graphs can be quite large and the addition
# of features from the crate(s) to all of the graph roots can be far too verbose.
# This option can be overridden via `--feature-depth` on the cmd line
feature-depth = 1

############
# SPECIFIC #
############

# This section is considered when running `cargo deny check advisories`
# More documentation for the advisories section can be found here:
# https://embarkstudios.github.io/cargo-deny/checks/advisories/cfg.html
[advisories]
# A list of advisory IDs to ignore. Note that ignored advisories will still
# output a note when they are encountered.
# NOTE: We necessarily take responsibility for problems ourselves.
ignore = [
    { id = "RUSTSEC-2018-0015", reason = "`term`, transitive dependency from `tester` in `tarantool-module` (see <https://git.picodata.io/core/tarantool-module/issues/252>)" },
    { id = "RUSTSEC-2024-0014", reason = "`generational-arena`, transitive dependency from `abi_stable` in `picodata` (see <https://git.picodata.io/core/picodata/issues/2052>)" },
    { id = "RUSTSEC-2024-0436", reason = "`paste`, transitive dependency from `abi_stable` in `picodata` (see <https://git.picodata.io/core/picodata/issues/2052>)" },
    { id = "RUSTSEC-2025-0057", reason = "`fxhash`, transitive dependency from `raft` in `picodata`" },
]

# This section is considered when running `cargo deny check licenses`
# More documentation for the licenses section can be found here:
# https://embarkstudios.github.io/cargo-deny/checks/licenses/cfg.html
[licenses]
# List of explicitly allowed licenses
# See https://spdx.org/licenses/ for list of possible licenses
# [possible values: any SPDX 3.11 short identifier (+ optional exception)].
allow = [
    "0BSD",
    "Apache-2.0",
    "BSD-1-Clause",
    "BSD-2-Clause",
    "BSD-3-Clause",
    "ICU",
    "ISC",
    "LGPL-3.0",
    "MIT",
    "MPL-2.0",
    "Unicode-3.0",
    "Zlib",
]
# Determines what happens when one of the licenses that appears in the `allow`
# list is not encountered in the dependency graph.
unused-allowed-license = "allow"
# The confidence threshold for detecting a license from license text.
# The higher the value, the more closely the license text must be to the
# canonical license text of a valid SPDX license file.
# [possible values: any between 0.0 and 1.0].
confidence-threshold = 0.85

[licenses.private]
# If true, ignores workspace crates that aren't published, or are only
# published to private registries.
# To see how to mark a crate as unpublished (to the official registry),
# visit https://doc.rust-lang.org/cargo/reference/manifest.html#the-publish-field.
ignore = false

# This section is considered when running `cargo deny check bans`.
# More documentation about the 'bans' section can be found here:
# https://embarkstudios.github.io/cargo-deny/checks/bans/cfg.html
[bans]
# Lint level for when multiple versions of the same crate are detected
multiple-versions = "allow"
# Lint level for when a crate version requirement is `*`
# TODO(kbezuglyi):
# (1) See <https://github.com/EmbarkStudios/cargo-deny/issues/241> (we have
# the same problems in our dependencies).
# (2) The current `rmp` dependency in Picodata is specified as a wildcard.
# This is because the `tarantool-module` crate, which Picodata depends on,
# requires a specific version of `rmp`. To ensure version consistency between
# the two, we currently allow the wildcard. This issue will be resolved once
# `tarantool-module` is integrated directly into the workspace (rather than
# as a Git submodule), at which point we can define a precise, workspace-level
# version constraint for `rmp`.
wildcards = "allow"
# The graph highlighting used when creating dotgraphs for crates
# with multiple versions
# * lowest-version - The path to the lowest versioned duplicate is highlighted
# * simplest-path - The path to the version with the fewest edges is highlighted
# * all - Both lowest-version and simplest-path are used
highlight = "all"
# The default lint level for `default` features for crates that are members of
# the workspace that is being checked. This can be overridden by allowing/denying
# `default` on a crate-by-crate basis if desired.
workspace-default-features = "allow"
# The default lint level for `default` features for external crates that are not
# members of the workspace. This can be overridden by allowing/denying `default`
# on a crate-by-crate basis if desired.
external-default-features = "allow"

# This section is considered when running `cargo deny check sources`.
# More documentation about the 'sources' section can be found here:
# https://embarkstudios.github.io/cargo-deny/checks/sources/cfg.html
[sources]
# Lint level for what to happen when a crate from a crate registry that is not
# in the allow list is encountered
unknown-registry = "deny"
# Lint level for what to happen when a crate from a git repository that is not
# in the allow list is encountered
unknown-git = "deny"
# List of URLs for allowed crate registries. Defaults to the crates.io index
# if not specified. If it is specified but empty, no registries are allowed.
allow-registry = ["https://github.com/rust-lang/crates.io-index"]
# List of URLs for allowed Git repositories
allow-git = ["https://git.picodata.io/core/raft-rs"]

[sources.allow-org]
github = []
gitlab = []
bitbucket = []
